(** Expectra -- a small expect like library *) 

type status = 
  | Success of string 
  | Failure of string 
(** status can either report the success or failure
  * of a match *) 

type matches = 
  | BeginsWith of Str.regexp
  | EndsWith of Str.regexp
  | WithFunction of (string -> status) 
  | Any
(** several matching options are provided. BeingsWith and 
  * EndsWith will search the entire string only the direction
  * searched is different. WithFunction can take any function
  * that takes a string and returns a stauts *) 

type 'a t = { 
  reader; 
  writer; 
  stream; 
  status; 
} 
(** type holds information about the expect process *) 
val get_status : 'a t -> status
(** returns the status of the expect script *) 

val next_line : ?expect:matches -> string t -> string t Lwt.t
(** returns the next line from the interactive process *) 

val send : 'a t -> ?expect:matches -> string -> string t Lwt.t
(** sends a string of text to the interactive process and
  * tries to match the resulting string with what is passed
  * as expect. By default will match anything (Any) **) 

val spawn : string -> 'a t Lwt.t
(** spawns a new process to be interacted with via send *)

val close : t -> unit Lwt.t 
(** close the connections to the process and terminates it *)
